# Configuration properties for protocol adapters.
adapters:
  kafkaMessagingSpec:
    commonClientConfig:
      "bootstrap.servers": "hono-kafka-broker.hono:9092"
    command:
      consumerConfig:
        "compression.type": none
    commandInternal:
      adminClientConfig:
        "compression.type": none
    commandResponse:
      producerConfig:
        "compression.type": none
    event:
      producerConfig:
        "compression.type": none
    notification:
      consumerConfig:
        "compression.type": none
    telemetry:
      producerConfig:
        "compression.type": none

  # tenantSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Tenant service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  tenantSpec:
    host: "eclipse-hono-service-device-registry"
    port: 5672
    hostnameVerificationRequired: false

  # deviceRegistrationSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Device Registration service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  deviceRegistrationSpec:
    host: "eclipse-hono-service-device-registry"
    port: 5672
    hostnameVerificationRequired: false

  # credentialsSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Credentials service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  credentialsSpec:
    host: "eclipse-hono-service-device-registry"
    port: 5672
    hostnameVerificationRequired: false

  # commandRouterSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Command Router service.
  # If not set, default properties will be used for establishing a TLS based connection
  # to the command router server.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  commandRouterSpec:
    host: "eclipse-hono-service-command-router"
    port: 5672
    hostnameVerificationRequired: false

  amqp:
    # enabled indicates if Hono's AMQP 1.0 adapter should be deployed.
    enabled: false

  coap:
    # enabled indicates if Hono's CoAP adapter should be deployed.
    enabled: false

  http:
    # enabled indicates if Hono's HTTP adapter should be deployed.
    enabled: true
    tlsKeysSecret: "none"
    tlsTrustStoreConfigMap: "none"
    envConfigMap:
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # http contains configuration properties for the adapter's
      # exposed HTTP endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      http:
        insecurePortEnabled: true
        insecurePortBindAddress: "0.0.0.0"
  lora:
    # enabled indicates if Hono's Lora adapter should be deployed.
    enabled: false


  mqtt:
    # enabled indicates if Hono's MQTT 3.1.1 adapter should be deployed.
    enabled: false

deviceRegistryExample:

  # enabled indicates whether the example Device Registry
  # should be deployed and used.
  # If this property is set to false, then the protocol adapters need to be
  # explicitly configured for connecting to the Tenant, Device Registration,
  # and Credentials services using properties
  # - "adapters.tenantSpec"
  # - "adapters.deviceRegistrationSpec"
  # - "adapters.credentialsSpec"
  enabled: true
  type: "mongodb"
  tlsKeysSecret: "none"
  tlsTrustStoreConfigMap: "none"
  hono:
    # auth contains Hono client properties used by the example registry for
    # connecting to the Authentication service.
    # If not set, the registry by default uses the Auth Server component to
    # authenticate clients.
    auth:
      host: "eclipse-hono-service-auth"
      port: 5672
      hostnameVerificationRequired: false
      supportedSaslMechanisms: "PLAIN"
      connectTimeout: 2000
    registry:
      amqp:
        insecurePortEnabled: true
        insecurePortBindAddress: "0.0.0.0"
      http:
        insecurePortEnabled: true
        insecurePortBindAddress: "0.0.0.0"
    kafka:
      # commonClientConfig contains Kafka client configuration to be used by all Kafka consumers and producers
      # created by the device registry.
      # If this property is not set or if it does not contain a "bootstrap.servers" property, the
      # "adapters.kafkaMessagingSpec.commonClientConfig" property is used as a fallback.
      commonClientConfig:
        "bootstrap.servers": "hono-kafka-broker.hono:9092"
      event:
        producerConfig:
          "compression.type": none
      notification:
        producerConfig:
          "compression.type": none

  # mongoDBBasedDeviceRegistry contains configuration properties specific to the
  # MongoDB based device registry.
  mongoDBBasedDeviceRegistry:
    mongodb:
      # The host name or IP address of the MongoDB instance.
      host: mongodb.honno
      # The port that the MongoDB instance is listening on.
      port: 27017
      # The name of the MongoDB database to be used by the device registry application.
      dbName: "hono-device"
      # The user name to use for authenticating to the MongoDB instance.
      username: "root"
      # The password to use for authenticating to the MongoDB instance.
      password: "aaa123456"






amqpMessagingNetworkExample:
  # enabled indicates whether the example AMQP Messaging Network
  # consisting of a single Dispatch Router and Broker should be
  # deployed and used. By default an internal Broker is deployed.
  # As alternative an external Broker can be configured as well.
  enabled: false

# kafkaMessagingClusterExample contains properties for configuring an example Kafka cluster
# to be used for messaging if "messagingNetworkTypes" contains "kafka"
kafkaMessagingClusterExample:
  # enabled indicates whether the example Kafka cluster consisting of a single broker
  # and one Zookeeper instance should be deployed. This minimal deployment is not suitable
  # for production purposes. To use an already existing Kafka cluster instead,
  # set this property to false and configure "adapters.kafkaMessagingSpec".
  enabled: false